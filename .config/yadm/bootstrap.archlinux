#!/bin/bash

set -eufo pipefail

info_message() {
    echo -e "\n\033[0;32m[yadm bootstrap archlinux] $1\033[0m"
}

stage_message() {
  echo -e "\n\033[0;34m[yadm bootstrap archlinux] $1\033[0m"
}

TMP_DIR="/tmp/bootstrap"
FONTS_DIR="$HOME/.local/share/fonts"

PACKAGES=(
  alacritty
  bat
  bluez
  bluez-utils
  docker
  docker-compose
  emacs
  exa
  fastfetch
  flatpak
  fzf
  git
  go-yq
  grim
  httpie
  hypridle
  hyprland
  hyprpaper
  intltool
  jq
  less
  neovim
  networkmanager
  noto-fonts
  noto-fonts-cjk
  noto-fonts-emoji
  noto-fonts-extra
  openssh
  p7zip
  pinentry
  pipewire
  pipewire-alsa
  pipewire-pulse
  ripgrep
  rofi-wayland
  slurp
  tailscale
  tmux
  trash-cli
  ttf-dejavu
  udiskie
  ueberzugpp
  vim
  waybar
  wayland
  wl-clipboard
  xdg-desktop-portal
  xdg-desktop-portal-hyprland
  xdg-user-dirs
  xorg-xwayland
  yazi
  zsh
)

AUR_PACKAGES=(
  kanata-bin
)

info_message "ArchLinux setup started."

stage_message "Prepare tmp dir..."
rm -rf ${TMP_DIR}

stage_message "Update system..."
sudo pacman -Syu --noconfirm 

stage_message "Install packages..."
sudo pacman -Sq --noconfirm --needed "${PACKAGES[@]}"

stage_message "Install yay..."
if ! command -v yay &> /dev/null; then
  git clone https://aur.archlinux.org/yay.git ${TMP_DIR}/yay
  makepkg -si -D ${TMP_DIR}/yay --needed --noconfirm
fi

stage_message "Install aur packages..."
yay -S --noconfirm --needed "${AUR_PACKAGES[@]}"

stage_message "Install GNU Pass extensions..."
if [ ! -d "/usr/lib/password-store/extensions/" ]; then
  git clone https://github.com/rjekker/pass-extension-meta ${TMP_DIR}/pass-meta
  sudo make -C ${TMP_DIR}/pass-meta install
fi

stage_message "Setup network..."
sudo systemctl enable --now NetworkManager

stage_message "Setup docker..."
sudo systemctl enable --now docker
sudo usermod -aG docker $USER

stage_message "Setup bluetooth..."
sudo systemctl enable --now bluetooth

stage_message "Setup udisks2..."
sudo systemctl enable --now udisks2

stage_message "Add flatpak repos..."
flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

stage_message "Install and setup Zen Browser flatpak package..." 
flatpak install --user -y flathub app.zen_browser.zen 2>&1 | sed "/Looking/d" | sed "/Skipping/d"
flatpak override --user --filesystem=xdg-download app.zen_browser.zen

stage_message "Install nerd fonts..."
nerd_fonts_url="https://github.com/ryanoasis/nerd-fonts/releases/latest/download"
if [ ! -d "${FONTS_DIR}/SourceCodePro" ]; then
  curl --create-dirs -L -o ${TMP_DIR}/SourceCodePro.tar.xz ${nerd_fonts_url}/SourceCodePro.tar.xz
  mkdir -p ${FONTS_DIR}/SourceCodePro
  tar xf ${TMP_DIR}/SourceCodePro.tar.xz -C ${FONTS_DIR}/SourceCodePro
fi
if [ ! -d "${FONTS_DIR}/RobotoMono" ]; then
  curl --create-dirs -L -o ${TMP_DIR}/RobotoMono.tar.xz ${nerd_fonts_url}/RobotoMono.tar.xz
  mkdir -p ${FONTS_DIR}/RobotoMono
  tar xf ${TMP_DIR}/RobotoMono.tar.xz -C ${FONTS_DIR}/RobotoMono
fi

stage_message "Install dev tools..."
if [ ! -d "$HOME/.pyenv" ]; then
  curl -fsSL https://pyenv.run | bash
fi
if [ ! -d "$HOME/.local/share/pypoetry" ]; then
  curl -sSL https://install.python-poetry.org | python3 -
  poetry config virtualenvs.in-project true
fi

stage_message "Clear tmp dir..."
rm -rf ${TMP_DIR}

info_message "Archlinux setup completed.\n"
